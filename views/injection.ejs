<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="/css/style.css">
</head>

<body>
    <%- include ('blocks/header') -%>
        <div class="ib-wrapper">
            <div class="new-wrap">
                <h2>Инъекции</h2>
                <div>Инъекция — это пользовательский ввод с вредоносным кодом. Чаще всего инъекции включают SQL-запросы
                    и команды на языке оболочки операционной системы.
                </div>
                <div>Инъекции позволяют злоумышленникам внедрять свой вредоносный код на сервер и выполнять его.
                    Результат — потеря данных, кража данных или повреждение системы.
                </div>
                <div>Представьте, что у компании есть база данных с информацией о клиентах. Если в форме ввода
                    пользовательской информации — допустим, для обращения в службу поддержки — не установлена фильтрация
                    и валидация вводимых данных,
                    то злоумышленник может написать в ней обычный SQL-запрос и получить в ответ от сервера
                    конфиденциальную информацию из базы клиентов.
                </div>
                <div>
                    Что делать:
                    <ul>
                        <li>Используйте параметризованные запросы или ORM (object-relational mapping) для работы с базой
                            данных.</li>
                        <li>Валидируйте и фильтруйте входные данные. Принимайте только допустимые символы и структуры
                            данных.</li>
                        <li>Применяйте принцип наименьших привилегий: ограничивайте права доступа к базе данных
                            необходимыми.</li>
                        <li>Используйте LIMIT и другие элементы управления SQL в запросах для предотвращения массового
                            раскрытия записей в случае SQL-инъекции.</li>
                    </ul>

                </div>

                <div>
                    Чего не стоит делать:
                    <ul>
                        <li>Конкатенировать и вставлять непроверенные данные пользователя напрямую в SQL-запросы,
                            команды операционной системы или другие исполняемые на сервере контексты.
                        </li>
                        <li>Надеяться на то, что фильтрация одного типа данных предотвратит инъекции. Злоумышленники
                            могут использовать разные методы атак.
                        </li>
                        <li>Хранить конфиденциальные данные в чистом тексте без шифрования в базе данных.
                        </li>
                    </ul>

                </div>
                <div class="task"> Для вас мы подготовили пример SQL-инъекции в разделе авторизации, который позволит получить доступ
                    к закрытой информации из базы данных.
                    Суть будет заключаться в атаке на саму форму авторизации - пользуясь знанием языка SQL мы можем
                    составить небольшой запрос, который можно будет ввести в поля логина и пароля.
                    В силу отсутствия валидации на стороне сервера мы можем получить данные о пользователе или целой
                    таблице пользователей.
                    Запрос имеет вид: " or ""="
                    Так же можете поэкспериментировать с модификациями запросов, основываясь на идее, что комментарии в
                    языке SQL начинаются с двойного тире: --
                </div>

            </div>

        </div>
        <%- include ('blocks/footer') -%>
</body>

</html>